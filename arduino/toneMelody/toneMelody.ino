
#include "pitches.h"


int melody[] = {
NOTE_D4,
0,
0,
0,
0,
0,
NOTE_D4,
NOTE_D4,
NOTE_D4,
0,
0,
0,
NOTE_D4,
NOTE_D4,
NOTE_D4,
NOTE_D4,
NOTE_DS4,
NOTE_DS4,
NOTE_DS4,
0,
0,
0,
NOTE_DS4,
NOTE_DS4,
NOTE_E4,
0,
0,
0,
NOTE_E4,
NOTE_E4,
NOTE_E4,
NOTE_E4,
NOTE_F4,
NOTE_F4,
NOTE_F4,
0,
0,
0,
NOTE_F4,
NOTE_F4,
NOTE_E4,
0,
0,
0,
NOTE_E4,
NOTE_E4,
NOTE_E4,
NOTE_E4,
NOTE_DS4,
NOTE_DS4,
NOTE_DS4,
0,
0,
0,
NOTE_DS4,
NOTE_DS4,
NOTE_AS3,
0,
0,
0,
NOTE_C4,
0,
0,
0,
NOTE_D4,
NOTE_D4,
NOTE_D4,
0,
0,
0,
NOTE_D4,
NOTE_D4,
NOTE_D4,
0,
0,
0,
NOTE_D4,
NOTE_D4,
NOTE_D4,
NOTE_D4,
NOTE_DS4,
NOTE_DS4,
NOTE_DS4,
0,
0,
0,
NOTE_DS4,
NOTE_DS4,
NOTE_E4,
0,
0,
0,
NOTE_E4,
NOTE_E4,
NOTE_E4,
NOTE_E4,
NOTE_F4,
NOTE_F4,
NOTE_F4,
0,
0,
0,
NOTE_F4,
NOTE_F4,
NOTE_E4,
0,
0,
0,
NOTE_E4,
NOTE_E4,
NOTE_E4,
NOTE_E4,
NOTE_DS4,
NOTE_DS4,
NOTE_DS4,
0,
0,
0,
NOTE_DS4,
NOTE_DS4,
NOTE_AS3,
0,
0,
0,
NOTE_C4,
0,
0,
0,
NOTE_G3,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_D4,
0,
0,
0,
NOTE_C4,
0,
0,
NOTE_AS3,
NOTE_AS3,
0,
0,
0,
NOTE_C4,
0,
0,
NOTE_D4,
NOTE_D4,
0,
0,
0,
NOTE_G3,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_D4,
0,
0,
0,
NOTE_C4,
0,
0,
NOTE_AS3,
NOTE_AS3,
0,
0,
0,
NOTE_A3,
0,
0,
0,
NOTE_G3,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_D4,
0,
0,
0,
NOTE_C4,
0,
0,
NOTE_AS3,
NOTE_AS3,
0,
0,
0,
NOTE_C4,
0,
0,
NOTE_D4,
NOTE_D4,
0,
0,
0,
NOTE_G3,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_D4,
0,
0,
0,
NOTE_C4,
0,
0,
NOTE_AS3,
NOTE_AS3,
0,
0,
0,
NOTE_A3,
0,
0,
0,
NOTE_G3,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_D4,
0,
0,
0,
NOTE_C4,
0,
0,
NOTE_AS3,
NOTE_AS3,
0,
0,
0,
NOTE_C4,
0,
0,
NOTE_D4,
NOTE_D4,
0,
0,
0,
NOTE_G3,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_D4,
0,
0,
0,
NOTE_C4,
0,
0,
NOTE_AS3,
NOTE_AS3,
0,
0,
0,
NOTE_A3,
0,
0,
0,
NOTE_G3,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_D4,
0,
0,
0,
NOTE_C4,
0,
0,
NOTE_AS3,
NOTE_AS3,
0,
0,
0,
NOTE_C4,
0,
0,
NOTE_D4,
NOTE_D4,
0,
0,
0,
NOTE_G3,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_D4,
0,
0,
0,
NOTE_C4,
0,
0,
NOTE_AS3,
NOTE_AS3,
0,
0,
0,
NOTE_A3,
0,
0,
0,
0,
0,
0,
0,
NOTE_G3,
0,
0,
0,
NOTE_G4,
0,
0,
0,
0,
0,
0,
0,
NOTE_G4,
0,
0,
0,
0,
0,
0,
0,
NOTE_C4,
0,
0,
0,
0,
0,
NOTE_C4,
NOTE_D4,
NOTE_AS3,
0,
NOTE_G3,
0,
NOTE_G4,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_GS4,
0,
0,
0,
0,
0,
0,
0,
NOTE_G4,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_C4,
0,
0,
0,
NOTE_C5,
0,
0,
0,
0,
0,
0,
0,
NOTE_C5,
0,
0,
0,
0,
0,
0,
0,
NOTE_F5,
0,
0,
0,
0,
0,
NOTE_C5,
NOTE_D5,
NOTE_D5,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_E5,
0,
0,
0,
0,
0,
0,
0,
NOTE_DS5,
0,
0,
0,
0,
0,
0,
0,
NOTE_G4,
0,
NOTE_E4,
0,
NOTE_E4,
0,
NOTE_G4,
0,
NOTE_G4,
0,
NOTE_E4,
0,
NOTE_E4,
0,
NOTE_G4,
0,
NOTE_G4,
0,
NOTE_E4,
0,
NOTE_E4,
0,
0,
0,
NOTE_E4,
0,
0,
0,
0,
0,
NOTE_B4,
0,
NOTE_A4,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_E4,
0,
0,
0,
0,
0,
0,
0,
NOTE_FS4,
0,
0,
0,
0,
0,
0,
0,
NOTE_G4,
0,
NOTE_E4,
0,
NOTE_E4,
0,
NOTE_G4,
0,
NOTE_G4,
0,
NOTE_E4,
0,
NOTE_E4,
0,
NOTE_G4,
0,
NOTE_G4,
0,
NOTE_E4,
0,
NOTE_E4,
0,
0,
0,
NOTE_E4,
0,
0,
0,
0,
0,
NOTE_B4,
0,
NOTE_A4,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_B4,
0,
NOTE_FS4,
0,
NOTE_FS4,
0,
NOTE_B4,
0,
NOTE_B4,
0,
NOTE_FS4,
0,
NOTE_FS4,
0,
NOTE_B4,
0,
NOTE_E4,
0,
0,
0,
0,
0,
NOTE_D4,
NOTE_E4,
NOTE_FS4,
0,
0,
0,
0,
0,
0,
0,
NOTE_D4,
0,
NOTE_E4,
0,
0,
0,
0,
0,
NOTE_E4,
0,
NOTE_FS4,
0,
0,
0,
0,
0,
NOTE_E4,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_E4,
0,
0,
0,
NOTE_E4,
0,
0,
0,
0,
0,
NOTE_B4,
0,
NOTE_A4,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_G4,
0,
0,
0,
0,
0,
0,
0,
NOTE_FS4,
0,
0,
0,
0,
0,
0,
0,
NOTE_E4,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_E4,
0,
0,
0,
NOTE_E4,
0,
0,
0,
0,
0,
NOTE_B4,
0,
NOTE_CS5,
0,
0,
0,
0,
0,
0,
0,
NOTE_A4,
0,
0,
0,
0,
0,
0,
0,
NOTE_B4,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_E4,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_E4,
0,
0,
0,
NOTE_E4,
0,
0,
0,
0,
0,
NOTE_B4,
0,
NOTE_A4,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
NOTE_G4,
0,
0,
0,
0,
0,
0,
0,
NOTE_FS4,
0,
0,
0,
0,
0,
0,
0,
NOTE_E4,
0,
NOTE_E4,
0,
0,
0,
0,
0,
NOTE_E4,
0,
NOTE_FS4,
0,
0,
0,
0,
0,
NOTE_D4,
0,
NOTE_E4,
0
};

// note durations: 4 = quarter note, 8 = eighth note, etc.:
/*int noteDurations[] = {
  4, 8, 8, 4, 4, 4, 4, 4
};*/
int tempo =100;
int size_;
void setup() {
  size_ = sizeof(melody) / sizeof(int);
Serial.begin(9600);
Serial.println(size_);
}

void loop() {
int prev_tune=0;
int next_tune=0;
int temp=0;//max 3
  for (int thisNote = 0; thisNote < size_; thisNote++) {
Serial.println(thisNote);
   
//    int noteDuration = 1000 / noteDurations[thisNote];
if(melody[thisNote]!=0){
  //prev_tune=thisNote;
 
  noTone(8);
   delay(tempo*0.30);
 temp=0;
tone(8, melody[thisNote]);
    // to distinguish the notes, set a minimum time between them.
    // the note's duration + 30% seems to work well:

    delay(tempo);
    // stop the tone playing:
    //noTone(8);   
}
else
{
  if(temp<10){
  delay(tempo);
  temp++;
  }
  else{
  noTone(8);
  delay(tempo);
  }
}

  }
  noTone(8);

  delay(2000);
}
